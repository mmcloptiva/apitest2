{
    "openapi": "3.0.0",
    "info": {
        "title": "Customer Management",
        "description": "This is Swagger UI environment generated for the Customer Management following TMF specification",
        "version": "4.0.0"
    },
    "paths": {
        "/individual": {
            "get": {
                "tags": ["Individual API"],
                "summary": "List or find Individual objects",
                "description": "This operation list or find Individual entities",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Individual"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Individual API"],
                "summary": "Creates a Individual",
                "description": "This operation creates a Individual entity.",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/IndividualCreate"}
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Individual"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/individual/{id}": {
            "get": {
                "tags": ["Individual API"],
                "summary": "Retrieves a Individual by ID",
                "description": "This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Individual"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Individual API"],
                "summary": "Deletes a Individual",
                "description": "This operation deletes a Individual entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "204": {"description": "Deleted"},
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Individual API"],
                "summary": "Updates partially a Individual",
                "description": "This operation updates partially a Individual entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/IndividualUpdate"}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Individual"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "tags": ["Organization API"],
                "summary": "List or find Organization objects",
                "description": "This operation list or find Organization entities",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Organization"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Organization API"],
                "summary": "Creates a Organization",
                "description": "This operation creates a Organization entity.",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/OrganizationCreate"}
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Organization"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "get": {
                "tags": ["Organization API"],
                "summary": "Retrieves a Organization by ID",
                "description": "This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Organization"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Organization API"],
                "summary": "Deletes a Organization",
                "description": "This operation deletes a Organization entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "204": {"description": "Deleted"},
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Organization API"],
                "summary": "Updates partially a Organization",
                "description": "This operation updates partially a Organization entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/OrganizationUpdate"}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Organization"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/account/{id}": {
            "get": {
                "operationId": "getAccountProfile",
                "summary": "Retrieves account by ID",
                "description": "This operation retrieves a Account entity. Attribute selection is enabled for all first level attributes.",
                "tags": ["Account API (BSS)"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Account",
                        "required": true,
                        "in": "path",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Account"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/account": {
            "post": {
                "operationId": "account",
                "summary": "Creates an account",
                "description": "This operation creates individual or business Account entity.",
                "tags": ["Account API (BSS)"],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/AccountCreate"}
                        }
                    },
                    "description": "The Account to be created",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Account"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/updateAccountWithStateTransition/{id}": {
            "patch": {
                "operationId": "updateAccountWithStateTransition",
                "summary": "Updates account state",
                "description": "This operation updates account state in BSS.",
                "tags": ["Account API (BSS)"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Account",
                        "required": true,
                        "in": "path",
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/UpdateAccountState"}
                        }
                    },
                    "description": "Update state of the account in BSS",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/UpdateAccountStateResponse"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/account/listSubAccounts/{id}": {
            "get": {
                "operationId": "getListSubAccount",
                "summary": "Retrieves sub account by Ban ID",
                "description": "This operation retrieves a Sub Accounts",
                "tags": ["Account API (BSS)"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Account",
                        "required": true,
                        "in": "path",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/SubAccountsResponse"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/account/update/{id}": {
            "patch": {
                "summary": "update an account",
                "description": "This operation update account.",
                "tags": ["Account API (BSS)"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Account",
                        "required": true,
                        "in": "path",
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/AccountUpdate"}
                        }
                    },
                    "description": "The Account to be update",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/AccountUpdateResponse"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "tags": ["Hub API"],
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/EventSubscriptionInput"}
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/EventSubscription"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "tags": ["Hub API"],
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "204": {"description": "Deleted"},
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/customer": {
            "get": {
                "tags": ["Customer API"],
                "summary": "List or find Customer objects",
                "description": "This operation list or find Customer entities",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Customer"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Customer API"],
                "summary": "Creates a Customer",
                "description": "This operation creates a Customer entity.",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/CustomerCreate"}
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Customer"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/customer/{id}": {
            "get": {
                "tags": ["Customer API"],
                "summary": "Retrieves a Customer by ID",
                "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Customer"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Customer API"],
                "summary": "Deletes a Customer",
                "description": "This operation deletes a Customer entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json;charset=utf-8": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Customer API"],
                "summary": "Updates partially a Customer",
                "description": "This operation updates partially a Customer entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/CustomerUpdate"}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Customer"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/dashboard/customer/{id}": {
            "get": {
                "tags": ["Customer API"],
                "summary": "Retrieves a Customer Dashboard by ID",
                "description": "This operation gets account hierarchy under customer.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": true,
                        "schema": {"$ref": "#/components/schemas/QueryParamType"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/CustomerDashboard"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/billingAccount": {
            "get": {
                "tags": ["Billing Account API"],
                "summary": "List or find BillingAccount objects",
                "description": "This operation list or find BillingAccount entities",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/BillingAccount"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Billing Account API"],
                "summary": "Creates a BillingAccount",
                "description": "This operation creates a BillingAccount entity.",
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/BillingAccountCreate"}
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/BillingAccount"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/billingAccount/{id}": {
            "get": {
                "tags": ["Billing Account API"],
                "summary": "Retrieves a BillingAccount by ID",
                "description": "This operation retrieves a BillingAccount entity. Attribute selection is enabled for all first level attributes.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/BillingAccount"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Billing Account API"],
                "summary": "Deletes a BillingAccount",
                "description": "This operation deletes a BillingAccount entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json;charset=utf-8": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Billing Account API"],
                "summary": "Updates partially a BillingAccount",
                "description": "This operation updates partially a BillingAccount entity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json;charset=utf-8": {
                            "schema": {"$ref": "#/components/schemas/BillingAccountUpdate"}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/BillingAccount"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        },
        "/allEntitySearch/{filter}": {
            "get": {
                "tags": ["All Entity Search API"],
                "summary": "find in all entities",
                "description": "This operation is used to search in all entities",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "path",
                        "required": true,
                        "schema": {"type": "string"}
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/AllEntitiesSearch"}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json;charset=utf-8": {
                                "schema": {"$ref": "#/components/schemas/Error"}
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost:5001/",
            "description": "Local API Gateway server"
        },
        {
            "url": "http://35.226.70.39:5001/",
            "description": "Dev API Gateway server"
        }
    ],
    "components": {
        "schemas": {
            "Account": {
                "description": "Generic Account structure used to define commonalities between sub concepts of PartyAccount and Financial Account.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the account",
                        "type": "string"
                    },
                    "href": {
                        "title": "Unique reference of the account",
                        "type": "string"
                    },
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AccountBalance": {
                "description": "Balances linked to the account",
                "required": [
                    "balanceType",
                    "amount",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "balanceType": {
                        "title": "Type of the balance : deposit balance, disputed balance, loyalty balance, receivable balance...",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Money"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "TimePeriod"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AccountRef": {
                "description": "Account reference. A account may be a party account or a financial account.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the account",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the account",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "AccountRelationship": {
                "description": "Significant connection between accounts. For instance an aggregating account for a list of shop branches each having its own billing account.",
                "required": [
                    "relationshipType",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "relationshipType": {
                        "title": "Type of relationship",
                        "type": "string"
                    },
                    "account": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AccountRef"},
                            {"title": ""}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Validity period of that relationship"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AccountTaxExemption": {
                "description": "Proof of freedom from taxes imposed by a taxing jurisdiction",
                "required": [
                    "issuingJurisdiction",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "certificateNumber": {
                        "title": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction",
                        "type": "string"
                    },
                    "issuingJurisdiction": {
                        "title": "Name of the taxing jurisdiction for which taxes are exempt",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Reason of the tax exemption",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Period for which the exemption is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "SubAccount": {
                "description": "Sub Accounts payload.",
                "type": "object",
                "properties": {
                    "subAccounts": {
                        "title": "Sub Accounts list",
                        "type": "array"
                    },
                    "href": {
                        "title": "Unique reference of the account",
                        "type": "string",
                        "items": {
                            "parent": {
                                "title": "id of the accounts parent",
                                "type": "string"
                            },
                            "id": {
                                "title": "ban id of the account",
                                "type": "string"
                            },
                            "name": {
                                "title": "Name of the account",
                                "type": "string"
                            },
                            "state": {
                                "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                                "type": "string"
                            },
                            "role": {
                                "title": "Role of the account subscriber vendor etc",
                                "type": "string"
                            },
                            "responsible": {
                                "title": "Account is root or not flag",
                                "type": "string"
                            },
                            "spid": {
                                "title": "Service Provider Id",
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AccumulatedBalance": {
                "description": "Represents and tracks the aggregated amount remained or owed in certain account which is owned by certain customer for a set of buckets.",
                "required": [
                    "name",
                    "bucket",
                    "totalBalance"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text describing the contents of the aggregated balance",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name to identify the aggregated balance",
                        "type": "string"
                    },
                    "bucket": {
                        "title": "A reference to the buckets involved in the aggregation",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/BucketRef"}
                    },
                    "logicalResource": {
                        "allOf": [
                            {"$ref": "#/components/schemas/LogicalResourceRef"},
                            {"title": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."}
                        ]
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the buckets aggregated"}
                        ]
                    },
                    "product": {
                        "title": "A reference to the product whose consumption is managed by the bucket . This is an array to allow scenarios where a buckets are shared between different products",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "totalBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Aggregated for a set of prepay balance buckets associated to the product"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Action": {
                "description": "an abstract resource. example extensions are BalanceTopup, BalanceDeduct",
                "required": ["status"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique Identifier for the resource",
                        "type": "string"
                    },
                    "href": {
                        "title": "A reference to the resource",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ActionStatusType": {
                "enum": [
                    "CREATED",
                    "FAILED",
                    "CANCELLED",
                    "COMPLETED"
                ],
                "type": "string"
            },
            "Addressable": {
                "description": "Base schema for adressable entities",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    }
                }
            },
            "AdjustBalance": {
                "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
                "required": ["status"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "adjustType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustType"},
                            {"title": "valid values are RecurringCharge or OneTimeCharge"}
                        ]
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AdjustBalanceCancelEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalanceCancelEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "AdjustBalanceCancelEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "adjustBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "AdjustBalanceCreate": {
                "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity Skipped properties: id,href",
                "required": [
                    "amount",
                    "status",
                    "usageType"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "adjustType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustType"},
                            {"title": "valid values are RecurringCharge or OneTimeCharge"}
                        ]
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AdjustBalanceCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalanceCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "AdjustBalanceCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "adjustBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "AdjustBalanceFailureEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalanceFailureEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "AdjustBalanceFailureEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "adjustBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "AdjustBalanceUpdate": {
                "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity Skipped properties: id,href",
                "required": ["status"],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "adjustType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustType"},
                            {"title": "valid values are RecurringCharge or OneTimeCharge"}
                        ]
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AdjustType": {
                "enum": [
                    "RECURRING",
                    "ONETIME"
                ],
                "type": "string"
            },
            "AgreementRef": {
                "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the agreement",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "Attachment": {
                "description": "Complements the description of an element (for instance a product) through video, pictures...",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier for this particular attachment",
                        "type": "string"
                    },
                    "href": {
                        "title": "URI for this Attachment",
                        "type": "string"
                    },
                    "attachmentType": {
                        "title": "Attachment type such as video, picture",
                        "type": "string"
                    },
                    "content": {
                        "title": "The actual contents of the attachment object, if embedded, encoded as base64",
                        "type": "string"
                    },
                    "description": {
                        "title": "A narrative text describing the content of the attachment",
                        "type": "string"
                    },
                    "mimeType": {
                        "title": "Attachment mime type such as extension file for video, picture and document",
                        "type": "string"
                    },
                    "name": {
                        "title": "The name of the attachment",
                        "type": "string"
                    },
                    "url": {
                        "title": "Uniform Resource Locator, is a web page address (a subset of URI)",
                        "type": "string"
                    },
                    "size": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "The size of the attachment."}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period of time for which the attachment is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "AttachmentRef": {
                "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique-Identifier for this attachment",
                        "type": "string"
                    },
                    "href": {
                        "title": "URL serving as reference for the attachment resource",
                        "type": "string"
                    },
                    "description": {
                        "title": "A narrative text describing the content of the attachment",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "url": {
                        "title": "Link to the attachment media/content",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "AttachmentRefOrValue": {
                "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier for this particular attachment",
                        "type": "string"
                    },
                    "href": {
                        "title": "URI for this Attachment",
                        "type": "string"
                    },
                    "attachmentType": {
                        "title": "Attachment type such as video, picture",
                        "type": "string"
                    },
                    "content": {
                        "title": "The actual contents of the attachment object, if embedded, encoded as base64",
                        "type": "string"
                    },
                    "description": {
                        "title": "A narrative text describing the content of the attachment",
                        "type": "string"
                    },
                    "mimeType": {
                        "title": "Attachment mime type such as extension file for video, picture and document",
                        "type": "string"
                    },
                    "name": {
                        "title": "The name of the attachment",
                        "type": "string"
                    },
                    "url": {
                        "title": "Uniform Resource Locator, is a web page address (a subset of URI)",
                        "type": "string"
                    },
                    "size": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "The size of the attachment."}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period of time for which the attachment is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BalanceActionHistory": {
                "description": "A history of the following operations performed on the bucket: TopupBalance, AdjustBalance and TransferBalance",
                "required": [
                    "receiverLogicalResource",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "isAutoTopup": {
                        "title": "Indicates if the topup requested is an autotopup (to be processed periodically)",
                        "type": "boolean"
                    },
                    "numberOfPeriods": {
                        "format": "int32",
                        "title": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the executionof the topup every period",
                        "type": "integer"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "voucher": {
                        "title": "Identifier for a voucher when the topup can be performed by this means",
                        "type": "string"
                    },
                    "adjustType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AdjustType"},
                            {"title": "valid values are RecurringCharge or OneTimeCharge"}
                        ]
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "balanceTopup": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedTopupBalance"},
                            {"title": ""}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "costOwner": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CostOwnerType"},
                            {"title": "Indicates which related party will bear the costs of the transfer"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "item": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "receiver": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes role and name."}
                        ]
                    },
                    "receiverBucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket to which the balance will be transferred"}
                        ]
                    },
                    "receiverBucketUsageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"}
                        ]
                    },
                    "receiverLogicalResource": {
                        "allOf": [
                            {"$ref": "#/components/schemas/LogicalResourceRef"},
                            {"title": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."}
                        ]
                    },
                    "receiverProduct": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ProductRef"},
                            {"title": ""}
                        ]
                    },
                    "recurringPeriod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RecurringPeriodType"},
                            {"title": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the transfer action.This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "transferCost": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BankAccountDebit": {
                "description": "A bank account debit method of payment. This could be extended to add any required authorization fields to allow recurring payments",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "accountNumber": {
                        "title": "The Bank Account Number (this could refer to the IBAN or SWIFT number)",
                        "type": "string"
                    },
                    "accountNumberType": {
                        "title": "The type of account number (e.g.: IBAN, SWIFT, ...)",
                        "type": "string"
                    },
                    "BIC": {
                        "title": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
                        "type": "string"
                    },
                    "owner": {
                        "title": "The owner of the bank account. This is also the account name.",
                        "type": "string"
                    },
                    "bank": {
                        "title": "The display name of the bank.",
                        "type": "string"
                    }
                }
            },
            "BankAccountTransfer": {
                "description": "A bank transfer method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "accountNumber": {
                        "title": "The bank account number, this could refer to the iban or swift number.",
                        "type": "string"
                    },
                    "accountNumberType": {
                        "title": "The type of account number (e.g.: IBAN, SWIFT, ...)",
                        "type": "string"
                    },
                    "BIC": {
                        "title": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
                        "type": "string"
                    },
                    "owner": {
                        "title": "The owner of the bank account. This is also the account name.",
                        "type": "string"
                    },
                    "bank": {
                        "title": "The display name of the bank.",
                        "type": "string"
                    }
                }
            },
            "BankCard": {
                "description": "A bank card method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "brand": {
                        "title": "The card brand",
                        "type": "string"
                    },
                    "cardType": {
                        "title": "The type of card e.g. Credit, debit etc.",
                        "type": "string"
                    },
                    "cardNumber": {
                        "title": "The bank card number.",
                        "type": "string"
                    },
                    "expirationDate": {
                        "format": "date-time",
                        "title": "Expiration date of the bank card.",
                        "type": "string"
                    },
                    "cvv": {
                        "title": "The security code (e.g.: CVV, CVV2) of the card.",
                        "type": "string"
                    },
                    "lastFourDigits": {
                        "title": "The last four digits of the credit card.",
                        "type": "string"
                    },
                    "nameOnCard": {
                        "title": "The name on the card.",
                        "type": "string"
                    },
                    "bank": {
                        "title": "The bank that issued the card.",
                        "type": "string"
                    }
                }
            },
            "BillFormat": {
                "description": "A detailed description of the way in which a bill is presented.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory text for this bill format",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillFormatCreate": {
                "description": "A detailed description of the way in which a bill is presented. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "An explanatory text for this bill format",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillFormatRef": {
                "description": "BillFormat reference. A bill format is a description of the way in which a bill is presented.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the bill format",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the bill format",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillFormatRefOrValue": {
                "description": "An attachment by value or by reference.",
                "required": [
                    "isRef",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the bill format",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the bill format",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory text for this bill format",
                        "type": "string"
                    },
                    "isRef": {
                        "title": "",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillFormatUpdate": {
                "description": "A detailed description of the way in which a bill is presented. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "An explanatory text for this bill format",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillPresentationMedia": {
                "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory text describing this bill presentation media",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillPresentationMediaCreate": {
                "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "An explanatory text describing this bill presentation media",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillPresentationMediaRef": {
                "description": "PresentationMedia reference. A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the bill presentation media",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the bill presentation media",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillPresentationMediaRefOrValue": {
                "description": "An attachment by value or by reference.",
                "required": [
                    "isRef",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the bill presentation media",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the bill presentation media",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory text describing this bill presentation media",
                        "type": "string"
                    },
                    "isRef": {
                        "title": "",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillPresentationMediaUpdate": {
                "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "description": {
                        "title": "An explanatory text describing this bill presentation media",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillStructure": {
                "description": "The structure of the bill for party accounts (billing or settlement).",
                "type": "object",
                "properties": {
                    "cycleSpecification": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillingCycleSpecificationRefOrValue"},
                            {"title": ""}
                        ]
                    },
                    "format": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillFormatRefOrValue"},
                            {"title": ""}
                        ]
                    },
                    "presentationMedia": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/BillPresentationMediaRefOrValue"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingAccount": {
                "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount.",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "ratingType": {
                        "title": "Billing Type Property for prepaid,postpaid,hybrid",
                        "type": "string"
                    },
                    "groupType": {
                        "title": "Subscriber or Individual or Organization etc group type",
                        "type": "string"
                    },
                    "dealerCode": {
                        "title": "",
                        "type": "string"
                    },
                    "accountRole": {
                        "title": "",
                        "type": "string"
                    },
                    "discountClass": {
                        "title": "",
                        "type": "string"
                    },
                    "responsible": {
                        "title": "",
                        "type": "boolean"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingAccountAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillingAccountAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "BillingAccountAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "billingAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillingAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "BillingAccountCreate": {
                "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount. Skipped properties: id,href",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "ratingType": {
                        "title": "Billing Type Property for prepaid,postpaid,hybrid",
                        "type": "string"
                    },
                    "groupType": {
                        "title": "Subscriber or Individual or Organization etc group type",
                        "type": "string"
                    },
                    "dealerCode": {
                        "title": "",
                        "type": "string"
                    },
                    "discountClass": {
                        "title": "",
                        "type": "string"
                    },
                    "responsible": {
                        "title": "",
                        "type": "boolean"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingAccountStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillingAccountStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "BillingAccountStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "billingAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillingAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "BillingAccountUpdate": {
                "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount. Skipped properties: id,href,accountBalance",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "ratingType": {
                        "title": "Billing Type Property for prepaid,postpaid,hybrid",
                        "type": "string"
                    },
                    "groupType": {
                        "title": "Subscriber or Individual or Organization etc group type",
                        "type": "string"
                    },
                    "dealerCode": {
                        "title": "",
                        "type": "string"
                    },
                    "discountClass": {
                        "title": "",
                        "type": "string"
                    },
                    "responsible": {
                        "title": "",
                        "type": "boolean"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingCycleSpecification": {
                "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "billingDateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "billingPeriod": {
                        "title": "A billing time period. It can be recurring, for example: week, month, quarter of year, year .",
                        "type": "string"
                    },
                    "chargeDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "creditDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "description": {
                        "title": "An explanation regarding this billing cycle specification",
                        "type": "string"
                    },
                    "frequency": {
                        "title": "Frequency of the billing cycle (monthly for instance)",
                        "type": "string"
                    },
                    "mailingDateOffset": {
                        "format": "int32",
                        "title": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "paymentDueDateOffset": {
                        "format": "int32",
                        "title": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the billing specification cycle is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingCycleSpecificationCreate": {
                "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "billingDateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "billingPeriod": {
                        "title": "A billing time period. It can be recurring, for example: week, month, quarter of year, year .",
                        "type": "string"
                    },
                    "chargeDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "creditDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "description": {
                        "title": "An explanation regarding this billing cycle specification",
                        "type": "string"
                    },
                    "frequency": {
                        "title": "Frequency of the billing cycle (monthly for instance)",
                        "type": "string"
                    },
                    "mailingDateOffset": {
                        "format": "int32",
                        "title": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "paymentDueDateOffset": {
                        "format": "int32",
                        "title": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the billing specification cycle is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BillingCycleSpecificationRef": {
                "description": "BillingCycleSpecification reference. A description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the billing cycle specification",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the billing cycle specification",
                        "type": "string"
                    },
                    "dateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "frequency": {
                        "title": "Frequency of the billing cycle (monthly for instance)",
                        "type": "string"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillingCycleSpecificationRefOrValue": {
                "description": "An attachment by value or by reference.",
                "required": [
                    "isRef",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the billing cycle specification",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the billing cycle specification",
                        "type": "string"
                    },
                    "billingDateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "billingPeriod": {
                        "title": "A billing time period. It can be recurring, for example: week, month, quarter of year, year .",
                        "type": "string"
                    },
                    "chargeDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "creditDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "dateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "description": {
                        "title": "An explanation regarding this billing cycle specification",
                        "type": "string"
                    },
                    "frequency": {
                        "title": "Frequency of the billing cycle (monthly for instance)",
                        "type": "string"
                    },
                    "isRef": {
                        "title": "",
                        "type": "boolean"
                    },
                    "mailingDateOffset": {
                        "format": "int32",
                        "title": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "paymentDueDateOffset": {
                        "format": "int32",
                        "title": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the billing specification cycle is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BillingCycleSpecificationUpdate": {
                "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "billingDateShift": {
                        "format": "int32",
                        "title": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period.",
                        "type": "integer"
                    },
                    "billingPeriod": {
                        "title": "A billing time period. It can be recurring, for example: week, month, quarter of year, year .",
                        "type": "string"
                    },
                    "chargeDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "creditDateOffset": {
                        "format": "int32",
                        "title": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "description": {
                        "title": "An explanation regarding this billing cycle specification",
                        "type": "string"
                    },
                    "frequency": {
                        "title": "Frequency of the billing cycle (monthly for instance)",
                        "type": "string"
                    },
                    "mailingDateOffset": {
                        "format": "int32",
                        "title": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "name": {
                        "title": "A short descriptive name",
                        "type": "string"
                    },
                    "paymentDueDateOffset": {
                        "format": "int32",
                        "title": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod.",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the billing specification cycle is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Bucket": {
                "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text describing the contents of the balance managed by the bucket",
                        "type": "string"
                    },
                    "isShared": {
                        "title": "True if the bucket is shared between several devices or users",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "Friendly name to identify the bucket",
                        "type": "string"
                    },
                    "remainingValueName": {
                        "title": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "remainingValue": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "reservedValue": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount reserved on the bucket"}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketStatusType"},
                            {"title": "status for the bucket. active, expired, suspended"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BucketCreate": {
                "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
                "required": ["usageType"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text describing the contents of the balance managed by the bucket",
                        "type": "string"
                    },
                    "isShared": {
                        "title": "True if the bucket is shared between several devices or users",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "Friendly name to identify the bucket",
                        "type": "string"
                    },
                    "remainingValueName": {
                        "title": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "remainingValue": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "reservedValue": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount reserved on the bucket"}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketStatusType"},
                            {"title": "status for the bucket. active, expired, suspended"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "BucketCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "BucketCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Bucket"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "BucketDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "BucketDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Bucket"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "BucketRef": {
                "description": "link to the resource that holds bucket information",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string",
                        "example": "ResourceSpecification"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string",
                        "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string",
                        "example": "LogicalResourceSpecification"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "BucketStatusType": {
                "enum": [
                    "ACTIVE",
                    "SUSPENDED",
                    "EXPIRED"
                ],
                "type": "string"
            },
            "Cash": {
                "description": "A cash method of payment. It has no additional data, but it could be extended to add information e.g.: the cashier who took the payment, the person who paid, etc",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    }
                }
            },
            "ChannelRef": {
                "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the channel.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string",
                        "example": "ResourceSpecification"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string",
                        "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string",
                        "example": "LogicalResourceSpecification"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "Characteristic": {
                "description": "Describes a given characteristic of an object or entity through a name/value pair.",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name of the characteristic",
                        "type": "string"
                    },
                    "valueType": {
                        "title": "Data type of the value of the characteristic",
                        "type": "string"
                    },
                    "value": {
                        "title": "The value of the characteristic",
                        "type": "object",
                        "additionalProperties": {"type": "object"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Check": {
                "description": "A check method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "checkId": {
                        "title": "Unique identifier of the check.",
                        "type": "string"
                    },
                    "drawer": {
                        "title": "Person or entity writing the check.",
                        "type": "string"
                    },
                    "payee": {
                        "title": "Person or entity the check is addressed to.",
                        "type": "string"
                    },
                    "signedDate": {
                        "format": "date-time",
                        "title": "Date when the check was signed.",
                        "type": "string"
                    },
                    "bank": {
                        "title": "Bank performing the payment of the check.",
                        "type": "string"
                    }
                }
            },
            "Contact": {
                "description": "An individual or an organization used as a contact point for a given account and accessed via some contact medium.",
                "required": [
                    "contactType",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "contactName": {
                        "title": "A displayable name for that contact",
                        "type": "string"
                    },
                    "contactType": {
                        "title": "Type of contact (primary, secondary...)",
                        "type": "string"
                    },
                    "partyRoleType": {
                        "title": "Identifies what kind of party role type is linked to the contact (a account manager...)",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": ""}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Validity period of that contact"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ContactMedium": {
                "description": "Indicates the contact medium that could be used to contact the party.",
                "type": "object",
                "properties": {
                    "mediumType": {
                        "title": "Type of the contact medium, such as: email address, telephone number, postal address",
                        "type": "string"
                    },
                    "preferred": {
                        "title": "If true, indicates that is the preferred contact medium",
                        "type": "boolean"
                    },
                    "characteristic": {
                        "allOf": [
                            {"$ref": "#/components/schemas/MediumCharacteristic"},
                            {"title": "Any additional characteristic(s) of this contact medium"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the contact medium is valid for"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "CostOwnerType": {
                "enum": [
                    "ORIGINATOR",
                    "RECEIVER"
                ],
                "type": "string"
            },
            "CreditProfile": {
                "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
                "required": [
                    "creditProfileDate",
                    "validFor"
                ],
                "type": "object",
                "properties": {
                    "creditProfileDate": {
                        "format": "date-time",
                        "title": "The date the profile was established",
                        "type": "string"
                    },
                    "creditRiskRating": {
                        "format": "int32",
                        "title": "This is an integer whose value is used to rate the risk",
                        "type": "integer"
                    },
                    "creditScore": {
                        "format": "int32",
                        "title": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the profile is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Customer": {
                "required": ["engagedParty"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "The party - an organization or an individual - that is engaged as a customer."}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the Customer is valid for."}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "CustomerAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CustomerAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "CustomerAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Customer"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "CustomerCreate": {
                "description": " Skipped properties: id,href",
                "required": [
                    "name",
                    "engagedParty"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "The party - an organization or an individual - that is engaged as a customer."}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the Customer is valid for."}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "CustomerCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CustomerCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "CustomerCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Customer"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "CustomerDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CustomerDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "CustomerDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Customer"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "CustomerStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CustomerStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "CustomerStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "customer": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Customer"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "CustomerUpdate": {
                "description": " Skipped properties: id,href",
                "required": ["engagedParty"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the customer.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a customer.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "The party - an organization or an individual - that is engaged as a customer."}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the Customer is valid for."}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "DigitalWallet": {
                "description": "A digital wallet method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "service": {
                        "title": "Organization, platform or currency backing the wallet (e.g.: PayPal, Yandex, BitCoinâ€¦).",
                        "type": "string"
                    },
                    "walletId": {
                        "title": "Account identifier in that service.",
                        "type": "string"
                    },
                    "walletUrl": {
                        "title": "URI pointing at the digital wallet (e.g.: //paypal.me/johndoe).",
                        "type": "string"
                    }
                }
            },
            "DirectDebit": {
                "description": "Direct Debit is a fully automated payment instrument which is generally used for recurrent payments. It allows a creditor to initiate the payment order. In doing so, it exempts the debtor from having to send a separate payment order at each due date",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "mandateId": {
                        "title": "Unique mandate reference",
                        "type": "string"
                    },
                    "mandateStatus": {
                        "title": "The status of the mandate(Active/Inactive/Pending)",
                        "type": "string"
                    },
                    "mandateType": {
                        "title": "The type of mandate e.g., single-use(single)/multi-use(recurring)",
                        "type": "string"
                    },
                    "mandateCategory": {
                        "title": "The identification code of the Scheme e.g., core/b2b",
                        "type": "string"
                    },
                    "signature": {
                        "title": "The (e)Mandate electronic signature data",
                        "type": "string"
                    },
                    "signatureDate": {
                        "format": "date-time",
                        "title": "The date of signing of the (e)Mandate",
                        "type": "string"
                    },
                    "mandateStatusDate": {
                        "format": "date-time",
                        "title": "The date of the mandate status change",
                        "type": "string"
                    },
                    "firstDebitDate": {
                        "format": "date-time",
                        "title": "The first debit date. The debit date of the collection is the day when the payment of the Debtor is due to the Creditor",
                        "type": "string"
                    },
                    "lastDebitDate": {
                        "format": "date-time",
                        "title": "The last debit date. The debit date of the collection is the day when the payment of the Debtor is due to the Creditor",
                        "type": "string"
                    },
                    "cancellationDate": {
                        "format": "date-time",
                        "title": "The date on which the (e)Mandate has been cancelled by the Debtor or the Creditor.",
                        "type": "string"
                    },
                    "accountNumber": {
                        "title": "The bank account number, this could refer to the iban or swift number.",
                        "type": "string"
                    },
                    "accountNumberType": {
                        "title": "The type of account number (e.g.: IBAN, SWIFT, ...)",
                        "type": "string"
                    },
                    "reference": {
                        "title": "A reference that the party can later use to identify the direct debit.",
                        "type": "string"
                    },
                    "BIC": {
                        "title": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
                        "type": "string"
                    },
                    "owner": {
                        "title": "The owner of the bank account. This is also the account name.",
                        "type": "string"
                    },
                    "bank": {
                        "title": "The display name of the bank.",
                        "type": "string"
                    },
                    "attachment": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AttachmentRefOrValue"}
                    }
                }
            },
            "Disability": {
                "description": "Lack or inadequate strength or ability.",
                "type": "object",
                "properties": {
                    "disabilityCode": {
                        "title": "Code of the disability",
                        "type": "string"
                    },
                    "disabilityName": {
                        "title": "Name of the disability",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Entity": {
                "description": "Base entity schema for use in TMForum Open-APIs",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "type": {"type": "string"}
                }
            },
            "EntityRef": {
                "description": "Entity reference schema to be use for all entityRef class.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "Error": {
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
                "required": [
                    "code",
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Application relevant detail, defined in the API or a common list.",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Explanation of the reason for the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "message": {
                        "title": "More details and corrective actions related to the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "status": {
                        "title": "HTTP Error code extension",
                        "type": "string"
                    },
                    "referenceError": {
                        "title": "URI of documentation describing the error.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class.",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name.",
                        "type": "string"
                    }
                }
            },
            "EventSubscription": {
                "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
                "required": [
                    "id",
                    "callback"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id of the listener",
                        "type": "string"
                    },
                    "callback": {
                        "title": "The callback being registered.",
                        "type": "string"
                    },
                    "query": {
                        "title": "additional data to be passed",
                        "type": "string"
                    },
                    "eventType": {"type": "string"}
                }
            },
            "EventSubscriptionInput": {
                "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
                "required": ["callback"],
                "type": "object",
                "properties": {
                    "callback": {
                        "title": "The callback being registered.",
                        "type": "string"
                    },
                    "query": {
                        "title": "additional data to be passed",
                        "type": "string"
                    }
                }
            },
            "Extensible": {
                "description": "Base Extensible schema for use in TMForum Open-APIs",
                "type": "object",
                "properties": {
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string"
                    }
                }
            },
            "ExternalReference": {
                "description": "External reference of the individual or reference in other system",
                "type": "object",
                "properties": {
                    "externalReferenceType": {
                        "title": "Type of the external reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "External reference name",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "FinancialAccount": {
                "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party. It is a specialization of entity Account.",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "FinancialAccountAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountAttributeValueChangeEvent ayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "FinancialAccountAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "FinancialAccountCreate": {
                "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party. It is a specialization of entity Account. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "FinancialAccountCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "FinancialAccountCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "FinancialAccountDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "FinancialAccountDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "FinancialAccountRef": {
                "description": "AccountReceivable reference. An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. An account receivable aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the account",
                        "type": "string"
                    },
                    "href": {
                        "title": "Unique reference of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "accountBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AccountBalance"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "FinancialAccountStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "FinancialAccountStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "FinancialAccountUpdate": {
                "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party. It is a specialization of entity Account. Skipped properties: id,href,lastModified",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Individual": {
                "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "aristocraticTitle": {
                        "title": "e.g. Baron, Graf, Earl,â€¦",
                        "type": "string"
                    },
                    "birthDate": {
                        "format": "date-time",
                        "title": "Birth date",
                        "type": "string"
                    },
                    "countryOfBirth": {
                        "title": "Country where the individual was born",
                        "type": "string"
                    },
                    "deathDate": {
                        "format": "date-time",
                        "title": "Date of death",
                        "type": "string"
                    },
                    "familyName": {
                        "title": "Contains the non-chosen or inherited name. Also known as last name in the Western context",
                        "type": "string"
                    },
                    "familyNamePrefix": {
                        "title": "Family name prefix",
                        "type": "string"
                    },
                    "formattedName": {
                        "title": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,â€¦)",
                        "type": "string"
                    },
                    "fullName": {
                        "title": "Full name flatten (first, middle, and last names)",
                        "type": "string"
                    },
                    "gender": {
                        "title": "Gender",
                        "type": "string"
                    },
                    "generation": {
                        "title": "e.g.. Sr, Jr, III (the third),â€¦",
                        "type": "string"
                    },
                    "givenName": {
                        "title": "First name of the individual",
                        "type": "string"
                    },
                    "legalName": {
                        "title": "Legal name or birth name (name one has for official purposes)",
                        "type": "string"
                    },
                    "location": {
                        "title": "Temporary current location od the individual (may be used if the individual has approved its sharing)",
                        "type": "string"
                    },
                    "maritalStatus": {
                        "title": "Marital status (married, divorced, widow ...)",
                        "type": "string"
                    },
                    "middleName": {
                        "title": "Middles name or initial",
                        "type": "string"
                    },
                    "nationality": {
                        "title": "Nationality",
                        "type": "string"
                    },
                    "placeOfBirth": {
                        "title": "Reference to the place where the individual was born",
                        "type": "string"
                    },
                    "preferredGivenName": {
                        "title": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname",
                        "type": "string"
                    },
                    "title": {
                        "title": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "disability": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Disability"}
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "individualIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/IndividualIdentification"}
                    },
                    "languageAbility": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LanguageAbility"}
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameIndividual"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "skill": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Skill"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualStateType"},
                            {"title": "Status of the individual"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "IndividualAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "IndividualAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "individual": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Individual"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "IndividualCreate": {
                "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about. Skipped properties: id,href",
                "required": [
                    "familyName",
                    "givenName"
                ],
                "type": "object",
                "properties": {
                    "aristocraticTitle": {
                        "title": "e.g. Baron, Graf, Earl,â€¦",
                        "type": "string"
                    },
                    "birthDate": {
                        "format": "date-time",
                        "title": "Birth date",
                        "type": "string"
                    },
                    "countryOfBirth": {
                        "title": "Country where the individual was born",
                        "type": "string"
                    },
                    "deathDate": {
                        "format": "date-time",
                        "title": "Date of death",
                        "type": "string"
                    },
                    "familyName": {
                        "title": "Contains the non-chosen or inherited name. Also known as last name in the Western context",
                        "type": "string"
                    },
                    "familyNamePrefix": {
                        "title": "Family name prefix",
                        "type": "string"
                    },
                    "formattedName": {
                        "title": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,â€¦)",
                        "type": "string"
                    },
                    "fullName": {
                        "title": "Full name flatten (first, middle, and last names)",
                        "type": "string"
                    },
                    "gender": {
                        "title": "Gender",
                        "type": "string"
                    },
                    "generation": {
                        "title": "e.g.. Sr, Jr, III (the third),â€¦",
                        "type": "string"
                    },
                    "givenName": {
                        "title": "First name of the individual",
                        "type": "string"
                    },
                    "legalName": {
                        "title": "Legal name or birth name (name one has for official purposes)",
                        "type": "string"
                    },
                    "location": {
                        "title": "Temporary current location od the individual (may be used if the individual has approved its sharing)",
                        "type": "string"
                    },
                    "maritalStatus": {
                        "title": "Marital status (married, divorced, widow ...)",
                        "type": "string"
                    },
                    "middleName": {
                        "title": "Middles name or initial",
                        "type": "string"
                    },
                    "nationality": {
                        "title": "Nationality",
                        "type": "string"
                    },
                    "placeOfBirth": {
                        "title": "Reference to the place where the individual was born",
                        "type": "string"
                    },
                    "preferredGivenName": {
                        "title": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname",
                        "type": "string"
                    },
                    "title": {
                        "title": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "disability": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Disability"}
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "individualIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/IndividualIdentification"}
                    },
                    "languageAbility": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LanguageAbility"}
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameIndividual"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "skill": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Skill"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualStateType"},
                            {"title": "Status of the individual"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "IndividualCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "IndividualCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "individual": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Individual"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "IndividualDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "IndividualDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "individual": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Individual"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "IndividualIdentification": {
                "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
                "type": "object",
                "properties": {
                    "identificationId": {
                        "title": "Identifier",
                        "type": "string"
                    },
                    "identificationType": {
                        "title": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)",
                        "type": "string"
                    },
                    "issuingAuthority": {
                        "title": "Authority which has issued the identifier, such as: social security, town hall",
                        "type": "string"
                    },
                    "issuingDate": {
                        "format": "date-time",
                        "title": "Date at which the identifier was issued",
                        "type": "string"
                    },
                    "attachment": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AttachmentRefOrValue"},
                            {"title": ""}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the identification information is valid."}
                        ]
                    },
                    "validated": {
                        "title": "If value is true, the identification document has been marked as validated.",
                        "type": "boolean"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "IndividualStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "IndividualStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "individual": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Individual"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "IndividualStateType": {
                "enum": [
                    "INITIALIZED",
                    "VALIDATED",
                    "DECEADED"
                ],
                "type": "string"
            },
            "IndividualUpdate": {
                "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about. Skipped properties: id,href",
                "type": "object",
                "properties": {
                    "aristocraticTitle": {
                        "title": "e.g. Baron, Graf, Earl,â€¦",
                        "type": "string"
                    },
                    "birthDate": {
                        "format": "date-time",
                        "title": "Birth date",
                        "type": "string"
                    },
                    "countryOfBirth": {
                        "title": "Country where the individual was born",
                        "type": "string"
                    },
                    "deathDate": {
                        "format": "date-time",
                        "title": "Date of death",
                        "type": "string"
                    },
                    "familyName": {
                        "title": "Contains the non-chosen or inherited name. Also known as last name in the Western context",
                        "type": "string"
                    },
                    "familyNamePrefix": {
                        "title": "Family name prefix",
                        "type": "string"
                    },
                    "formattedName": {
                        "title": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,â€¦)",
                        "type": "string"
                    },
                    "fullName": {
                        "title": "Full name flatten (first, middle, and last names)",
                        "type": "string"
                    },
                    "gender": {
                        "title": "Gender",
                        "type": "string"
                    },
                    "generation": {
                        "title": "e.g.. Sr, Jr, III (the third),â€¦",
                        "type": "string"
                    },
                    "givenName": {
                        "title": "First name of the individual",
                        "type": "string"
                    },
                    "legalName": {
                        "title": "Legal name or birth name (name one has for official purposes)",
                        "type": "string"
                    },
                    "location": {
                        "title": "Temporary current location od the individual (may be used if the individual has approved its sharing)",
                        "type": "string"
                    },
                    "maritalStatus": {
                        "title": "Marital status (married, divorced, widow ...)",
                        "type": "string"
                    },
                    "middleName": {
                        "title": "Middles name or initial",
                        "type": "string"
                    },
                    "nationality": {
                        "title": "Nationality",
                        "type": "string"
                    },
                    "placeOfBirth": {
                        "title": "Reference to the place where the individual was born",
                        "type": "string"
                    },
                    "preferredGivenName": {
                        "title": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname",
                        "type": "string"
                    },
                    "title": {
                        "title": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "disability": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Disability"}
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "individualIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/IndividualIdentification"}
                    },
                    "languageAbility": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LanguageAbility"}
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameIndividual"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "skill": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Skill"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/IndividualStateType"},
                            {"title": "Status of the individual"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "LanguageAbility": {
                "description": "Ability of an individual to understand or converse in a language.",
                "type": "object",
                "properties": {
                    "isFavouriteLanguage": {
                        "title": "A true value specifies whether the language is considered by the individual as his favourite one",
                        "type": "boolean"
                    },
                    "languageCode": {
                        "title": "Language code (RFC 5646)",
                        "type": "string"
                    },
                    "languageName": {
                        "title": "Language name",
                        "type": "string"
                    },
                    "listeningProficiency": {
                        "title": "Listening proficiency evaluated for this language",
                        "type": "string"
                    },
                    "readingProficiency": {
                        "title": "Reading proficiency evaluated for this language",
                        "type": "string"
                    },
                    "speakingProficiency": {
                        "title": "Speaking proficiency evaluated for this language",
                        "type": "string"
                    },
                    "writingProficiency": {
                        "title": "Writing proficiency evaluated for this language",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "LogicalResourceRef": {
                "description": "reference to the LogicalResource eg MSISDN",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string",
                        "example": "ResourceSpecification"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string",
                        "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string",
                        "example": "LogicalResourceSpecification"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "MediumCharacteristic": {
                "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
                "type": "object",
                "properties": {
                    "city": {
                        "title": "The city",
                        "type": "string"
                    },
                    "contactType": {
                        "title": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalationâ€¦",
                        "type": "string"
                    },
                    "country": {
                        "title": "The country",
                        "type": "string"
                    },
                    "emailAddress": {
                        "title": "Full email address in standard format",
                        "type": "string"
                    },
                    "faxNumber": {
                        "title": "The fax number of the contact",
                        "type": "string"
                    },
                    "phoneNumber": {
                        "title": "The primary phone number of the contact",
                        "type": "string"
                    },
                    "postCode": {
                        "title": "Postcode",
                        "type": "string"
                    },
                    "socialNetworkId": {
                        "title": "Identifier as a member of a social network",
                        "type": "string"
                    },
                    "stateOrProvince": {
                        "title": "State or province",
                        "type": "string"
                    },
                    "street1": {
                        "title": "Describes the street",
                        "type": "string"
                    },
                    "street2": {
                        "title": "Complementary street description",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Money": {
                "description": "A base / value business entity used to represent money",
                "type": "object",
                "properties": {
                    "unit": {
                        "title": "Currency (ISO4217 norm uses 3 letters to define the currency)",
                        "type": "string"
                    },
                    "value": {
                        "format": "float",
                        "title": "A positive floating point number",
                        "type": "number"
                    }
                }
            },
            "Organization": {
                "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "isHeadOffice": {
                        "title": "If value is true, the organization is the head office",
                        "type": "boolean"
                    },
                    "isLegalEntity": {
                        "title": "If value is true, the organization is a legal entity known by a national referential.",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "Organization name (department name for example)",
                        "type": "string"
                    },
                    "nameType": {
                        "title": "Type of the name : Co, Inc, Ltd,â€¦",
                        "type": "string"
                    },
                    "organizationType": {
                        "title": "Type of Organization (company, department...)",
                        "type": "string"
                    },
                    "tradingName": {
                        "title": "Name that the organization (unit) trades under",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "existsDuring": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "organizationChildRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationChildRelationship"}
                    },
                    "organizationIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationIdentification"}
                    },
                    "organizationParentRelationship": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationParentRelationship"},
                            {"title": ""}
                        ]
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameOrganization"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationStateType"},
                            {"title": "Status of the organization"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OrganizationAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "OrganizationAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Organization"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "OrganizationChildRelationship": {
                "description": "Child references of an organization in a structure of organizations.",
                "type": "object",
                "properties": {
                    "relationshipType": {
                        "title": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example.",
                        "type": "string"
                    },
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationRef"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OrganizationCreate": {
                "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data. Skipped properties: id,href",
                "required": ["tradingName"],
                "type": "object",
                "properties": {
                    "isHeadOffice": {
                        "title": "If value is true, the organization is the head office",
                        "type": "boolean"
                    },
                    "isLegalEntity": {
                        "title": "If value is true, the organization is a legal entity known by a national referential.",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "Organization name (department name for example)",
                        "type": "string"
                    },
                    "nameType": {
                        "title": "Type of the name : Co, Inc, Ltd,â€¦",
                        "type": "string"
                    },
                    "organizationType": {
                        "title": "Type of Organization (company, department...)",
                        "type": "string"
                    },
                    "tradingName": {
                        "title": "Name that the organization (unit) trades under",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "existsDuring": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "organizationChildRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationChildRelationship"}
                    },
                    "organizationIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationIdentification"}
                    },
                    "organizationParentRelationship": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationParentRelationship"},
                            {"title": ""}
                        ]
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameOrganization"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationStateType"},
                            {"title": "Status of the organization"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OrganizationCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "OrganizationCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Organization"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "OrganizationDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "OrganizationDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Organization"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "OrganizationIdentification": {
                "description": "Represents our registration of information used as proof of identity by an organization",
                "type": "object",
                "properties": {
                    "identificationId": {
                        "title": "Identifier",
                        "type": "string"
                    },
                    "identificationType": {
                        "title": "Type of identification information used to identify the company in a country or internationally",
                        "type": "string"
                    },
                    "issuingAuthority": {
                        "title": "Authority which has issued the identifier (chamber of commerce...)",
                        "type": "string"
                    },
                    "issuingDate": {
                        "format": "date-time",
                        "title": "Date at which the identifier was issued",
                        "type": "string"
                    },
                    "attachment": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AttachmentRefOrValue"},
                            {"title": ""}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the identification information is valid."}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OrganizationParentRelationship": {
                "description": "Parent references of an organization in a structure of organizations.",
                "type": "object",
                "properties": {
                    "relationshipType": {
                        "title": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example.",
                        "type": "string"
                    },
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationRef"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OrganizationRef": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "OrganizationStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "OrganizationStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "organization": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Organization"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "OrganizationStateType": {
                "enum": [
                    "INITIALIZED",
                    "VALIDATED",
                    "CLOSED"
                ],
                "type": "string"
            },
            "OrganizationUpdate": {
                "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data. Skipped properties: id,href",
                "type": "object",
                "properties": {
                    "isHeadOffice": {
                        "title": "If value is true, the organization is the head office",
                        "type": "boolean"
                    },
                    "isLegalEntity": {
                        "title": "If value is true, the organization is a legal entity known by a national referential.",
                        "type": "boolean"
                    },
                    "name": {
                        "title": "Organization name (department name for example)",
                        "type": "string"
                    },
                    "nameType": {
                        "title": "Type of the name : Co, Inc, Ltd,â€¦",
                        "type": "string"
                    },
                    "organizationType": {
                        "title": "Type of Organization (company, department...)",
                        "type": "string"
                    },
                    "tradingName": {
                        "title": "Name that the organization (unit) trades under",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "existsDuring": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "organizationChildRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationChildRelationship"}
                    },
                    "organizationIdentification": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OrganizationIdentification"}
                    },
                    "organizationParentRelationship": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationParentRelationship"},
                            {"title": ""}
                        ]
                    },
                    "otherName": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/OtherNameOrganization"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/OrganizationStateType"},
                            {"title": "Status of the organization"}
                        ]
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OtherNameIndividual": {
                "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name.",
                "type": "object",
                "properties": {
                    "aristocraticTitle": {
                        "title": "e.g. Baron, Graf, Earl,â€¦",
                        "type": "string"
                    },
                    "familyName": {
                        "title": "Contains the non-chosen or inherited name. Also known as last name in the Western context",
                        "type": "string"
                    },
                    "familyNamePrefix": {
                        "title": "Family name prefix",
                        "type": "string"
                    },
                    "formattedName": {
                        "title": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,â€¦)",
                        "type": "string"
                    },
                    "fullName": {
                        "title": "Full name flatten (first, middle, and last names)",
                        "type": "string"
                    },
                    "generation": {
                        "title": "e.g. Sr, Jrâ€¦",
                        "type": "string"
                    },
                    "givenName": {
                        "title": "First name",
                        "type": "string"
                    },
                    "legalName": {
                        "title": "Legal name or birth name (name one has for official purposes)",
                        "type": "string"
                    },
                    "middleName": {
                        "title": "Middle name or initial",
                        "type": "string"
                    },
                    "preferredGivenName": {
                        "title": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname",
                        "type": "string"
                    },
                    "title": {
                        "title": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,....",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "OtherNameOrganization": {
                "description": "Keeps track of other names, for example the old name of an organization.",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Organization name (department name for example)",
                        "type": "string"
                    },
                    "nameType": {
                        "title": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh",
                        "type": "string"
                    },
                    "tradingName": {
                        "title": "The name that the organization trades under",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Party": {
                "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the organization",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink to access the organization",
                        "type": "string"
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditRating": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PartyCreditProfile"}
                    },
                    "externalReference": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ExternalReference"}
                    },
                    "partyCharacteristic": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemptionCertificate": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxExemptionCertificate"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyAccount": {
                "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account.",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyAccountAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyAccountAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyAccountCreate": {
                "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account. Skipped properties: id,href",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyAccountRef": {
                "description": "PartyAccount reference. A party account is an arrangement that a party has with an enterprise that provides products to the party.",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the party account",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the party account",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the party account",
                        "type": "string"
                    },
                    "status": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "PartyAccountStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyAccountStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyAccountUpdate": {
                "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account. Skipped properties: id,href,accountBalance",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyCreditProfile": {
                "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
                "type": "object",
                "properties": {
                    "creditAgencyName": {
                        "title": "Name of the credit agency giving the score",
                        "type": "string"
                    },
                    "creditAgencyType": {
                        "title": "Type of the credit agency giving the score",
                        "type": "string"
                    },
                    "ratingReference": {
                        "title": "Reference corresponding to the credit rating",
                        "type": "string"
                    },
                    "ratingScore": {
                        "format": "int32",
                        "title": "A measure of a partyâ€™s creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
                        "type": "integer"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyRole": {
                "description": "The part played by a party in a given context.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the party role.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a party role.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": ""}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the PartyRole is valid for."}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyRoleAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRoleAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyRoleAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyRole": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRole"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyRoleCreate": {
                "description": "The part played by a party in a given context. Skipped properties: id,href",
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the party role.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a party role.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": ""}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the PartyRole is valid for."}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PartyRoleCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRoleCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyRoleCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyRole": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRole"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyRoleDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRoleDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyRoleDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyRole": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRole"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyRoleStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the resource involved in the event",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the resource involved in the event",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explanatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRoleStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PartyRoleStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "partyRole": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyRole"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PartyRoleUpdate": {
                "description": "The part played by a party in a given context. Skipped properties: id,href",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Used to track the lifecycle status of the party role.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
                        "type": "string"
                    },
                    "account": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "agreement": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AgreementRef"}
                    },
                    "characteristic": {
                        "title": "Describes the characteristic of a party role.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Characteristic"}
                    },
                    "contactMedium": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ContactMedium"}
                    },
                    "creditProfile": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/CreditProfile"}
                    },
                    "engagedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": ""}
                        ]
                    },
                    "paymentMethod": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
                    },
                    "relatedParty": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The time period that the PartyRole is valid for."}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "PaymentMethod": {
                "description": "Defines a specific method of payment (e.g. direct debit with all details associated)",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    }
                }
            },
            "PaymentMethodAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "PaymentMethodAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethod"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PaymentMethodCreate": {
                "description": "Defines a specific method of payment (e.g. direct debit with all details associated) Skipped properties: id,href",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string",
                        "example": "My gold mastercard."
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string",
                        "example": "Main credit card"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string",
                        "example": "Active"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string",
                        "example": "2020-07-17T10:12:26+0000"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string",
                        "example": "This payment method has expired, therefore its status is now inactive."
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucher, etc). The details field type depends on the value assigned to this one."}
                        ]
                    }
                }
            },
            "PaymentMethodCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "PaymentMethodCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethod"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PaymentMethodDeleteEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodDeleteEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "PaymentMethodDeleteEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethod"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PaymentMethodRef": {
                "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the payment mean",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the payment mean",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the payment mean",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "PaymentMethodStatusChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodStatusChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "PaymentMethodStatusChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethod"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "PaymentMethodType": {
                "enum": [
                    "CASH",
                    "DIGITAL_WALLET",
                    "TOKENIZED_CARD",
                    "BANK_ACCOUNT_TRANSFER",
                    "BANK_ACCOUNT_DEBIT",
                    "BANK_CARD",
                    "VOUCHER",
                    "CHECK",
                    "BUCKET_PAYMENT_METHOD",
                    "ACCOUNT_PAYMENT_METHOD",
                    "LOYALTY_PAYMENT_METHOD",
                    "DIRECT_DEBIT"
                ],
                "type": "string"
            },
            "PaymentMethodUpdate": {
                "description": "Defines a specific method of payment (e.g. direct debit with all details associated) Skipped properties: id,href",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string",
                        "example": "My gold mastercard."
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string",
                        "example": "Main credit card"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string",
                        "example": "Active"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string",
                        "example": "2020-07-17T10:12:26+0000"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string",
                        "example": "This payment method has expired, therefore its status is now inactive."
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucher, etc). The details field type depends on the value assigned to this one."}
                        ]
                    }
                }
            },
            "PaymentPlan": {
                "description": "Defines a plan for payment (when a party wants to spread his payments)",
                "type": "object",
                "properties": {
                    "numberOfPayments": {
                        "format": "int32",
                        "title": "Number of payments used to spread the global payment",
                        "type": "integer"
                    },
                    "paymentFrequency": {
                        "title": "Frequency of the payments, such as monthly and bimonthly",
                        "type": "string"
                    },
                    "planType": {
                        "title": "Type of payment plan",
                        "type": "string"
                    },
                    "priority": {
                        "format": "int32",
                        "title": "Priority of the payment plan",
                        "type": "integer"
                    },
                    "status": {
                        "title": "Status of the payment plan (effective, ineffective)",
                        "type": "string"
                    },
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "totalAmount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Amount paid"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Validity period of the payment plan"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ProductRef": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string",
                        "example": "ResourceSpecification"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string",
                        "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string",
                        "example": "LogicalResourceSpecification"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "Quantity": {
                "description": "An amount in a given unit",
                "type": "object",
                "properties": {
                    "amount": {
                        "format": "float",
                        "title": "Numeric value in a given unit",
                        "type": "number"
                    },
                    "units": {
                        "title": "Unit",
                        "type": "string"
                    }
                }
            },
            "RecurringPeriodType": {
                "enum": [
                    "WEEKLY",
                    "FORTNIGHTLY",
                    "MONTHLY"
                ],
                "type": "string"
            },
            "RelatedParty": {
                "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
                "required": [
                    "id",
                    "@referredType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "role": {
                        "title": "Role played by the related party",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "RelatedPlace": {
                "description": "A  Place and an associated role as installation adress, delivery address, etc....",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the place",
                        "type": "string"
                    },
                    "href": {
                        "title": "Unique reference of the place",
                        "type": "string"
                    },
                    "name": {
                        "title": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]",
                        "type": "string"
                    },
                    "role": {
                        "title": "Role of the place, such as: [home delivery], [shop retrieval])",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "RelatedTopupBalance": {
                "description": "Related Entity reference. A related balance topup defines a relationship via a role to another balance topup. Used in the PrepayBalanceManagement API to track child topups that are related to the parent (initiating balance topup resource). PrepayBalanceManagement defines the child role",
                "required": [
                    "id",
                    "@referredType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the related entity.",
                        "type": "string"
                    },
                    "role": {
                        "title": "Role played by the TopupBalance. In the PrepayBalanceManagement API this is parent or child",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string",
                        "example": "ResourceSpecification"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string",
                        "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class Extensible name",
                        "type": "string",
                        "example": "LogicalResourceSpecification"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "ReserveBalance": {
                "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
                "required": ["status"],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ReserveBalanceCancelEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalanceCancelEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "ReserveBalanceCancelEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "reserveBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "ReserveBalanceCreate": {
                "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity Skipped properties: id,href",
                "required": [
                    "reason",
                    "amount",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "ReserveBalanceCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalanceCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "ReserveBalanceCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "reserveBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "ReserveBalanceFailureEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalanceFailureEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "ReserveBalanceFailureEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "reserveBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ReserveBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "ReserveBalanceUpdate": {
                "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity Skipped properties: id,href",
                "required": [
                    "reason",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "SettlementAccount": {
                "description": "A party account used for settlement purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount.",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "SettlementAccountAttributeValueChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "fieldPath": {
                        "title": "The path identifying the object field concerned by this notification.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/SettlementAccountAttributeValueChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "SettlementAccountAttributeValueChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "settlementAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/SettlementAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "SettlementAccountCreate": {
                "description": "A party account used for settlement purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount. Skipped properties: id,href",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountBalance": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "SettlementAccountStateChangeEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Identifier of the Process flow",
                        "type": "string"
                    },
                    "href": {
                        "title": "Reference of the ProcessFlow",
                        "type": "string"
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    },
                    "payload": {
                        "allOf": [
                            {"$ref": "#/components/schemas/SettlementAccountStateChangeEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    }
                }
            },
            "SettlementAccountStateChangeEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "settlementAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/SettlementAccount"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "SettlementAccountUpdate": {
                "description": "A party account used for settlement purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount. Skipped properties: id,href,accountBalance",
                "required": [
                    "name",
                    "relatedParty"
                ],
                "type": "object",
                "properties": {
                    "accountType": {
                        "title": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Detailed description of the party account",
                        "type": "string"
                    },
                    "lastModified": {
                        "format": "date-time",
                        "title": "Date of last modification of the account",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name of the account",
                        "type": "string"
                    },
                    "paymentStatus": {
                        "title": "The condition of the account, such as due, paid, in arrears.",
                        "type": "string"
                    },
                    "state": {
                        "title": "Contains the lifecycle state such as: Active, Closed, Suspended and so on.",
                        "type": "string"
                    },
                    "accountRelationship": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BillStructure"},
                            {"title": ""}
                        ]
                    },
                    "contact": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "The maximum amount of money that may be charged on an account"}
                        ]
                    },
                    "defaultPaymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": ""}
                        ]
                    },
                    "financialAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/FinancialAccountRef"},
                            {"title": ""}
                        ]
                    },
                    "paymentPlan": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "taxExemption": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "Skill": {
                "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).",
                "type": "object",
                "properties": {
                    "comment": {
                        "title": "A free text comment linked to the evaluation done",
                        "type": "string"
                    },
                    "evaluatedLevel": {
                        "title": "Level of expertise in a skill evaluated for an individual",
                        "type": "string"
                    },
                    "skillCode": {
                        "title": "Code of the skill",
                        "type": "string"
                    },
                    "skillName": {
                        "title": "Name of the skill such as Java language,â€¦",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TaxDefinition": {
                "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. There are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California,â€¦).",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the tax.",
                        "type": "string"
                    },
                    "name": {
                        "title": "Tax name.",
                        "type": "string"
                    },
                    "taxType": {
                        "title": "Type of  the tax.",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    },
                    "@referredType": {
                        "title": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    }
                }
            },
            "TaxExemptionCertificate": {
                "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country. An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Unique identifier of the certificate of the tax exemption",
                        "type": "string"
                    },
                    "attachment": {
                        "allOf": [
                            {"$ref": "#/components/schemas/AttachmentRefOrValue"},
                            {"title": ""}
                        ]
                    },
                    "taxDefinition": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/TaxDefinition"}
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": ""}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TimePeriod": {
                "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
                "type": "object",
                "properties": {
                    "endDateTime": {
                        "format": "date-time",
                        "title": "End of the time period, using IETC-RFC-3339 format",
                        "type": "string"
                    },
                    "startDateTime": {
                        "format": "date-time",
                        "title": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
                        "type": "string"
                    }
                }
            },
            "TokenizedCard": {
                "description": "A Tokenized Card method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "description": {
                        "title": "Text description of the contents of the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "brand": {
                        "title": "Card brand. Might be used for display purposes",
                        "type": "string"
                    },
                    "cardType": {
                        "title": "Card type. Might be used for display purposes.",
                        "type": "string"
                    },
                    "lastFourDigits": {
                        "title": "The last four digits of the credit card.",
                        "type": "string"
                    },
                    "tokenType": {
                        "title": "Token type (e.g.: emv).",
                        "type": "string"
                    },
                    "token": {
                        "title": "The token. A series of randomly generated numbers.",
                        "type": "string"
                    },
                    "issuer": {
                        "title": "The entity that issued the token.",
                        "type": "string"
                    },
                    "expirationDate": {
                        "format": "date-time",
                        "title": "The tokenised card's expiration date.",
                        "type": "string"
                    }
                }
            },
            "TopupBalance": {
                "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
                "required": [
                    "amount",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "isAutoTopup": {
                        "title": "Indicates if the topup requested is an autotopup (to be processed periodically)",
                        "type": "boolean"
                    },
                    "numberOfPeriods": {
                        "format": "int32",
                        "title": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the executionof the topup every period",
                        "type": "integer"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "voucher": {
                        "title": "Identifier for a voucher when the topup can be performed by this means",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "balanceTopup": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedTopupBalance"},
                            {"title": ""}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "recurringPeriod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RecurringPeriodType"},
                            {"title": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TopupBalanceCancelEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalanceCancelEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TopupBalanceCancelEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "topupBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TopupBalanceCreate": {
                "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type) Skipped properties: id,href",
                "required": [
                    "amount",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "isAutoTopup": {
                        "title": "Indicates if the topup requested is an autotopup (to be processed periodically)",
                        "type": "boolean"
                    },
                    "numberOfPeriods": {
                        "format": "int32",
                        "title": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the executionof the topup every period",
                        "type": "integer"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "voucher": {
                        "title": "Identifier for a voucher when the topup can be performed by this means",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "balanceTopup": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedTopupBalance"},
                            {"title": ""}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "recurringPeriod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RecurringPeriodType"},
                            {"title": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TopupBalanceCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalanceCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TopupBalanceCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "topupBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TopupBalanceFailureEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalanceFailureEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TopupBalanceFailureEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "topupBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TopupBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TopupBalanceUpdate": {
                "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type) Skipped properties: id,href",
                "required": ["status"],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "isAutoTopup": {
                        "title": "Indicates if the topup requested is an autotopup (to be processed periodically)",
                        "type": "boolean"
                    },
                    "numberOfPeriods": {
                        "format": "int32",
                        "title": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the executionof the topup every period",
                        "type": "integer"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "voucher": {
                        "title": "Identifier for a voucher when the topup can be performed by this means",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "balanceTopup": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedTopupBalance"},
                            {"title": ""}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "paymentMethod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodRef"},
                            {"title": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "recurringPeriod": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RecurringPeriodType"},
                            {"title": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TransferBalance": {
                "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).",
                "required": [
                    "reason",
                    "channel",
                    "logicalResource",
                    "receiverLogicalResource",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "costOwner": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CostOwnerType"},
                            {"title": "Indicates which related party will bear the costs of the transfer"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "receiver": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes role and name."}
                        ]
                    },
                    "receiverBucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket to which the balance will be transferred"}
                        ]
                    },
                    "receiverBucketUsageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"}
                        ]
                    },
                    "receiverLogicalResource": {
                        "allOf": [
                            {"$ref": "#/components/schemas/LogicalResourceRef"},
                            {"title": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."}
                        ]
                    },
                    "receiverProduct": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ProductRef"},
                            {"title": ""}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "transferCost": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TransferBalanceCancelEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalanceCancelEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TransferBalanceCancelEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "transferBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TransferBalanceCreate": {
                "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service). Skipped properties: id,href",
                "required": [
                    "reason",
                    "amount",
                    "channel",
                    "logicalResource",
                    "receiverLogicalResource",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "costOwner": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CostOwnerType"},
                            {"title": "Indicates which related party will bear the costs of the transfer"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "receiver": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes role and name."}
                        ]
                    },
                    "receiverBucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket to which the balance will be transferred"}
                        ]
                    },
                    "receiverBucketUsageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"}
                        ]
                    },
                    "receiverLogicalResource": {
                        "allOf": [
                            {"$ref": "#/components/schemas/LogicalResourceRef"},
                            {"title": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."}
                        ]
                    },
                    "receiverProduct": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ProductRef"},
                            {"title": ""}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "transferCost": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "TransferBalanceCreateEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalanceCreateEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TransferBalanceCreateEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "transferBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TransferBalanceFailureEvent": {
                "description": "The notification data structure",
                "type": "object",
                "properties": {
                    "event": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalanceFailureEventPayload"},
                            {"title": "The event payload linked to the involved resource object"}
                        ]
                    },
                    "eventId": {
                        "title": "The identifier of the notification.",
                        "type": "string"
                    },
                    "eventTime": {
                        "format": "date-time",
                        "title": "Time of the event occurrence.",
                        "type": "string"
                    },
                    "eventType": {
                        "title": "The type of the notification.",
                        "type": "string"
                    },
                    "correlationId": {
                        "title": "The correlation id for this event.",
                        "type": "string"
                    },
                    "domain": {
                        "title": "The domain of the event.",
                        "type": "string"
                    },
                    "title": {
                        "title": "The title of the event.",
                        "type": "string"
                    },
                    "description": {
                        "title": "An explnatory of the event.",
                        "type": "string"
                    },
                    "priority": {
                        "title": "A priority.",
                        "type": "string"
                    },
                    "timeOcurred": {
                        "format": "date-time",
                        "title": "The time the event occured.",
                        "type": "string"
                    }
                }
            },
            "TransferBalanceFailureEventPayload": {
                "description": "The event data structure",
                "type": "object",
                "properties": {
                    "transferBalance": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TransferBalance"},
                            {"title": "The involved resource data for the event"}
                        ]
                    }
                }
            },
            "TransferBalanceUpdate": {
                "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service). Skipped properties: id,href",
                "required": [
                    "reason",
                    "channel",
                    "logicalResource",
                    "receiverLogicalResource",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "confirmationDate": {
                        "format": "date-time",
                        "title": "Date when the deduction was confirmed in the server",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the recharge operation",
                        "type": "string"
                    },
                    "reason": {
                        "title": "Text describing the reason for the action/task",
                        "type": "string"
                    },
                    "requestedDate": {
                        "format": "date-time",
                        "title": "Date when the deduction request was received in the server",
                        "type": "string"
                    },
                    "amount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "Indicate the amount on the bucket"}
                        ]
                    },
                    "bucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket impacted by the request or the value itself."}
                        ]
                    },
                    "channel": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ChannelRef"},
                            {"title": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name"}
                        ]
                    },
                    "costOwner": {
                        "allOf": [
                            {"$ref": "#/components/schemas/CostOwnerType"},
                            {"title": "Indicates which related party will bear the costs of the transfer"}
                        ]
                    },
                    "logicalResource": {
                        "title": "",
                        "minItems": 1,
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/LogicalResourceRef"}
                    },
                    "partyAccount": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PartyAccountRef"},
                            {"title": "A reference to the account that owns the bucket impacted by the balance related operation"}
                        ]
                    },
                    "product": {
                        "title": "",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/ProductRef"}
                    },
                    "receiver": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes role and name."}
                        ]
                    },
                    "receiverBucket": {
                        "allOf": [
                            {"$ref": "#/components/schemas/BucketRef"},
                            {"title": "A reference to the bucket to which the balance will be transferred"}
                        ]
                    },
                    "receiverBucketUsageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"}
                        ]
                    },
                    "receiverLogicalResource": {
                        "allOf": [
                            {"$ref": "#/components/schemas/LogicalResourceRef"},
                            {"title": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."}
                        ]
                    },
                    "receiverProduct": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ProductRef"},
                            {"title": ""}
                        ]
                    },
                    "relatedParty": {
                        "title": "Used to provide information about any other entity with relation to the operation",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"}
                    },
                    "requestor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name."}
                        ]
                    },
                    "status": {
                        "allOf": [
                            {"$ref": "#/components/schemas/ActionStatusType"},
                            {"title": "Status of the operation"}
                        ]
                    },
                    "transferCost": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Money"},
                            {"title": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"}
                        ]
                    },
                    "usageType": {
                        "allOf": [
                            {"$ref": "#/components/schemas/UsageType"},
                            {"title": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"}
                        ]
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "The period for which the balance in the bucket is valid"}
                        ]
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "title": "When sub-classing, this defines the sub-class entity name",
                        "type": "string"
                    }
                }
            },
            "UsageType": {
                "enum": [
                    "MONETARY",
                    "VOICE",
                    "DATA",
                    "SMS",
                    "OTHER"
                ],
                "type": "string"
            },
            "Voucher": {
                "description": "A voucher method of payment.",
                "required": [
                    "name",
                    "@type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "unique identifier",
                        "type": "string"
                    },
                    "href": {
                        "title": "Hyperlink reference",
                        "type": "string"
                    },
                    "@baseType": {
                        "title": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "title": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "name": {
                        "title": "Friendly name assigned to the payment method",
                        "type": "string"
                    },
                    "isPreferred": {
                        "title": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
                        "type": "boolean"
                    },
                    "authorizationCode": {
                        "title": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status of the payment method",
                        "type": "string"
                    },
                    "statusDate": {
                        "format": "date-time",
                        "title": "The last time the payment method status changed.",
                        "type": "string"
                    },
                    "statusReason": {
                        "title": "The reason for the last status change.",
                        "type": "string"
                    },
                    "validFor": {
                        "allOf": [
                            {"$ref": "#/components/schemas/TimePeriod"},
                            {"title": "Date interval in which the payment method is valid"}
                        ]
                    },
                    "@type": {
                        "allOf": [
                            {"$ref": "#/components/schemas/PaymentMethodType"},
                            {"title": "Type of payment method (e.g.: bank card, cash, voucherâ€¦). The details field type depends on the value assigned to this one."}
                        ]
                    },
                    "relatedParty": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedParty"},
                            {"title": "Reference to the customer or party that owns that payment method or can use it."}
                        ]
                    },
                    "relatedPlace": {
                        "allOf": [
                            {"$ref": "#/components/schemas/RelatedPlace"},
                            {"title": "Reference to a place for billing or delivery address, if different to that of the related party."}
                        ]
                    },
                    "account": {
                        "title": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account.",
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRef"}
                    },
                    "code": {
                        "title": "Code that identifies the voucher.",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description of the voucher i.e.: get one and receive one free.",
                        "type": "string"
                    },
                    "value": {
                        "allOf": [
                            {"$ref": "#/components/schemas/Quantity"},
                            {"title": "The value of the voucher."}
                        ]
                    },
                    "discount": {
                        "title": "The discount that the voucher applies when it's a discount voucher.",
                        "type": "string"
                    },
                    "expirationDate": {
                        "format": "date-time",
                        "title": "The voucher's expiration date.",
                        "type": "string"
                    },
                    "campaign": {
                        "title": "Campaign this voucher belongs to.",
                        "type": "string"
                    }
                }
            },
            "UpdateAccountState": {
                "type": "object",
                "description": "BSS Account state Update model",
                "required": [
                    "newState",
                    "currentState"
                ],
                "properties": {
                    "newState": {
                        "type": "string",
                        "description": "New state of the account to be transitioned to"
                    },
                    "currentState": {
                        "type": "string",
                        "description": "Current state of the account"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/GenericParameters"}
                    }
                }
            },
            "GenericParameters": {
                "description": "Describes a given parameter(s) in name/value pair.",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name of the parameter",
                        "type": "string"
                    },
                    "valueType": {
                        "title": "Data type of the value of the parameter",
                        "type": "string"
                    },
                    "value": {
                        "title": "The value of the parameter",
                        "type": "string"
                    }
                }
            },
            "UpdateAccountStateResponse": {
                "type": "object",
                "description": "BSS Account state Update model",
                "properties": {
                    "currentState": {
                        "type": "string",
                        "description": "If successful BSS returns current state"
                    }
                }
            },
            "AccountCreate": {
                "type": "object",
                "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account.\nSkipped properties: id,href",
                "required": [
                    "name",
                    "relatedParty",
                    "spid",
                    "groupType",
                    "systemType",
                    "accountType",
                    "role"
                ],
                "properties": {
                    "accountType": {
                        "type": "string",
                        "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the party account"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of last modification of the account"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the account"
                    },
                    "paymentStatus": {
                        "type": "string",
                        "description": "The condition of the account, such as due, paid, in arrears."
                    },
                    "state": {
                        "type": "string",
                        "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
                    },
                    "spid": {
                        "type": "string",
                        "description": "This will contain the spid value (an integer)"
                    },
                    "dealerCode": {
                        "type": "string",
                        "description": ""
                    },
                    "discountClass": {
                        "type": "string",
                        "description": ""
                    },
                    "groupType": {
                        "type": "string",
                        "description": "Individual, group or group pooled (0,1,3) "
                    },
                    "systemType": {
                        "type": "string",
                        "description": "Prepaid or postpaid or hybrid (0,1,2)"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the account, such as subscriber, vendor (1,2)."
                    },
                    "accountBalance": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {"$ref": "#/components/schemas/BillStructure"},
                    "contact": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {"$ref": "#/components/schemas/Money"},
                    "defaultPaymentMethod": {"$ref": "#/components/schemas/PaymentMethodRef"},
                    "financialAccount": {"$ref": "#/components/schemas/FinancialAccountRef"},
                    "paymentPlan": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"},
                        "minItems": 1
                    },
                    "taxExemption": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                }
            },
            "AccountUpdate": {
                "type": "object",
                "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account.",
                "properties": {
                    "accountType": {
                        "type": "string",
                        "description": "Account type(will not be updated)."
                    },
                    "accountBalance": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountBalance"}
                    },
                    "accountRelationship": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountRelationship"}
                    },
                    "billStructure": {"$ref": "#/components/schemas/BillStructure"},
                    "contact": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Contact"}
                    },
                    "creditLimit": {"$ref": "#/components/schemas/Money"},
                    "defaultPaymentMethod": {"$ref": "#/components/schemas/PaymentMethodRef"},
                    "financialAccount": {"$ref": "#/components/schemas/FinancialAccountRef"},
                    "paymentPlan": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/PaymentPlan"}
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/RelatedParty"},
                        "minItems": 1
                    },
                    "taxExemption": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/AccountTaxExemption"}
                    }
                }
            },
            "AllEntitiesSearch": {
                "type": "object",
                "properties": {
                    "account": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/BillingAccount"}
                    },
                    "customer": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Customer"}
                    },
                    "party": {
                        "type": "array",
                        "items": {"$ref": "#/components/schemas/Individual"}
                    }
                }
            },
            "QueryParamType": {
                "type": "string",
                "enum": [
                    "CUSTOMER_ID",
                    "BAN"
                ]
            },
            "CustomerDashboard": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/CustomerDashboardProperties"}
            },
            "CustomerDashboardProperties": {
                "type": "object",
                "properties": {
                    "accountType": {"type": "string"},
                    "groupType": {"type": "string"},
                    "state": {"type": "string"},
                    "ratingType": {"type": "string"},
                    "responsible": {"type": "string"},
                    "name": {"type": "string"},
                    "ban": {"type": "string"}
                }
            },
            "SubAccountsResponse": {
                "required": ["subAccounts"],
                "properties": {
                    "subAccounts": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {"type": "string"},
                                "parent": {"type": "string"},
                                "responsible": {"type": "string"},
                                "role": {"type": "string"},
                                "spid": {"type": "string"},
                                "state": {"type": "string"}
                            }
                        }
                    }
                }
            },
            "AccountUpdateResponse": {
                "type": "object",
                "properties": {
                    "response": {
                        "type": "string",
                        "description": "Update action result in success or failure"
                    }
                }
            }
        }
    }
}