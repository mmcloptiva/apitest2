{
  "openapi": "3.0.0",
  "info": {
    "title": "Customer Management",
    "description": "This is Swagger UI environment generated for the TMF Customer Management specification",
    "version": "4.0"
  },
  "tags": [
    {"name": "customer"},
    {"name": "notification listeners (client side)"},
    {"name": "events subscription"}
  ],
  "paths": {
    "/customer": {
      "get": {
        "operationId": "listCustomer",
        "summary": "List or find Customer objects",
        "description": "This operation list or find Customer entities",
        "tags": ["customer"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "schema": {"type": "string"}
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "schema": {"type": "integer"}
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "schema": {"type": "integer"}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {"type": "integer"}
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {"type": "integer"}
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {"$ref": "#/components/schemas/Customer"}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createCustomer",
        "summary": "Creates a Customer",
        "description": "This operation creates a Customer entity.",
        "tags": ["customer"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/Customer_Create"}
            }
          },
          "description": "The Customer to be created",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Customer"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "operationId": "retrieveCustomer",
        "summary": "Retrieves a Customer by ID",
        "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["customer"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "in": "path",
            "schema": {"type": "string"}
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "in": "query",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Customer"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchCustomer",
        "summary": "Updates partially a Customer",
        "description": "This operation updates partially a Customer entity.",
        "tags": ["customer"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "in": "path",
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/Customer_Update"}
            }
          },
          "description": "The Customer to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Customer"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteCustomer",
        "summary": "Deletes a Customer",
        "description": "This operation deletes a Customer entity.",
        "tags": ["customer"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "in": "path",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "204": {"description": "Deleted"},
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/EventSubscriptionInput"}
            }
          },
          "description": "Data containing the callback endpoint to deliver the information",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscribed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/EventSubscription"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "204": {"description": "Deleted"},
          "400": {
            "description": "Bad request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/listener/customerCreateEvent": {
      "post": {
        "operationId": "listenToCustomerCreateEvent",
        "summary": "Client listener for entity CustomerCreateEvent",
        "description": "Example of a client listener for receiving the notification CustomerCreateEvent",
        "tags": ["notification listeners (client side)"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/CustomerCreateEvent"}
            }
          },
          "description": "The event data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/EventSubscription"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/listener/customerAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToCustomerAttributeValueChangeEvent",
        "summary": "Client listener for entity CustomerAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent",
        "tags": ["notification listeners (client side)"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/CustomerAttributeValueChangeEvent"}
            }
          },
          "description": "The event data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/EventSubscription"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/listener/customerStateChangeEvent": {
      "post": {
        "operationId": "listenToCustomerStateChangeEvent",
        "summary": "Client listener for entity CustomerStateChangeEvent",
        "description": "Example of a client listener for receiving the notification CustomerStateChangeEvent",
        "tags": ["notification listeners (client side)"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/CustomerStateChangeEvent"}
            }
          },
          "description": "The event data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/EventSubscription"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    },
    "/listener/customerDeleteEvent": {
      "post": {
        "operationId": "listenToCustomerDeleteEvent",
        "summary": "Client listener for entity CustomerDeleteEvent",
        "description": "Example of a client listener for receiving the notification CustomerDeleteEvent",
        "tags": ["notification listeners (client side)"],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {"$ref": "#/components/schemas/CustomerDeleteEvent"}
            }
          },
          "description": "The event data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/EventSubscription"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {"$ref": "#/components/schemas/Error"}
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {"url": "https://serverRoot/tmf-api/customerManagement/v4/"}
  ],
  "components": {
    "schemas": {
      "AccountRef": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "required": ["name"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the account"
          },
          "href": {
            "type": "string",
            "description": "Reference of the account"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the account"
          },
          "name": {
            "type": "string",
            "description": "Name of the account"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "AgreementRef": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of a related entity."
          },
          "href": {
            "type": "string",
            "description": "Reference of the related entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the agreement"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": ["id"]
      },
      "Any": {},
      "Characteristic": {
        "type": "object",
        "description": "Describes a given characteristic of an object or entity through a name/value pair.",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the characteristic"
          },
          "valueType": {
            "type": "string",
            "description": "Data type of the value of the characteristic"
          },
          "value": {"$ref": "#/components/schemas/Any"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "ContactMedium": {
        "type": "object",
        "description": "Indicates the contact medium that could be used to contact the party.",
        "required": [
          "mediumType",
          "characteristic"
        ],
        "properties": {
          "mediumType": {
            "type": "string",
            "description": "Type of the contact medium, such as: email address, telephone number, postal address"
          },
          "preferred": {
            "type": "boolean",
            "description": "If true, indicates that is the preferred contact medium"
          },
          "characteristic": {"$ref": "#/components/schemas/MediumCharacteristic"},
          "validFor": {"$ref": "#/components/schemas/TimePeriod"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "CreditProfile": {
        "type": "object",
        "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
        "required": [
          "creditProfileDate",
          "validFor"
        ],
        "properties": {
          "creditProfileDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the profile was established"
          },
          "creditRiskRating": {
            "type": "integer",
            "description": "This is an integer whose value is used to rate the risk"
          },
          "creditScore": {
            "type": "integer",
            "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
          },
          "validFor": {"$ref": "#/components/schemas/TimePeriod"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "Customer": {
        "type": "object",
        "required": ["engagedParty"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for Customers"
          },
          "href": {
            "type": "string",
            "description": "Url used to reference the customer."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
          },
          "status": {
            "type": "string",
            "description": "Used to track the lifecycle status of the customer."
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
          },
          "account": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AccountRef"}
          },
          "agreement": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AgreementRef"}
          },
          "characteristic": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Characteristic"},
            "description": "Describes the characteristic of a customer."
          },
          "contactMedium": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/ContactMedium"}
          },
          "creditProfile": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/CreditProfile"}
          },
          "engagedParty": {"$ref": "#/components/schemas/RelatedParty"},
          "paymentMethod": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
          },
          "relatedParty": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/RelatedParty"}
          },
          "validFor": {"$ref": "#/components/schemas/TimePeriod"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "Customer_Create": {
        "type": "object",
        "description": "\nSkipped properties: id,href",
        "required": [
          "engagedParty",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
          },
          "status": {
            "type": "string",
            "description": "Used to track the lifecycle status of the customer."
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
          },
          "account": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AccountRef"}
          },
          "agreement": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AgreementRef"}
          },
          "characteristic": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Characteristic"},
            "description": "Describes the characteristic of a customer."
          },
          "contactMedium": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/ContactMedium"}
          },
          "creditProfile": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/CreditProfile"}
          },
          "engagedParty": {"$ref": "#/components/schemas/RelatedParty"},
          "paymentMethod": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
          },
          "relatedParty": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/RelatedParty"}
          },
          "validFor": {"$ref": "#/components/schemas/TimePeriod"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "Customer_Update": {
        "type": "object",
        "description": "\nSkipped properties: id,href",
        "required": ["engagedParty"],
        "properties": {
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
          },
          "status": {
            "type": "string",
            "description": "Used to track the lifecycle status of the customer."
          },
          "statusReason": {
            "type": "string",
            "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
          },
          "account": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AccountRef"}
          },
          "agreement": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AgreementRef"}
          },
          "characteristic": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Characteristic"},
            "description": "Describes the characteristic of a customer."
          },
          "contactMedium": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/ContactMedium"}
          },
          "creditProfile": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/CreditProfile"}
          },
          "engagedParty": {"$ref": "#/components/schemas/RelatedParty"},
          "paymentMethod": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/PaymentMethodRef"}
          },
          "relatedParty": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/RelatedParty"}
          },
          "validFor": {"$ref": "#/components/schemas/TimePeriod"},
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "EntityRef": {
        "type": "object",
        "description": "Entity reference schema to be use for all entityRef class.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of a related entity."
          },
          "href": {
            "type": "string",
            "description": "Reference of the related entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": ["id"]
      },
      "MediumCharacteristic": {
        "type": "object",
        "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city"
          },
          "contactType": {
            "type": "string",
            "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation\u2026"
          },
          "country": {
            "type": "string",
            "description": "The country"
          },
          "emailAddress": {
            "type": "string",
            "description": "Full email address in standard format"
          },
          "faxNumber": {
            "type": "string",
            "description": "The fax number of the contact"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The primary phone number of the contact"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode"
          },
          "socialNetworkId": {
            "type": "string",
            "description": "Identifier as a member of a social network"
          },
          "stateOrProvince": {
            "type": "string",
            "description": "State or province"
          },
          "street1": {
            "type": "string",
            "description": "Describes the street"
          },
          "street2": {
            "type": "string",
            "description": "Complementary street description"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          }
        }
      },
      "PaymentMethodRef": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the payment mean"
          },
          "href": {
            "type": "string",
            "description": "Reference of the payment mean"
          },
          "name": {
            "type": "string",
            "description": "Name of the payment mean"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": ["id"]
      },
      "RelatedParty": {
        "type": "object",
        "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
        "required": [
          "@referredType",
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of a related entity."
          },
          "href": {
            "type": "string",
            "description": "Reference of the related entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "endDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "End of the time period, using IETC-RFC-3339 format"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
          }
        }
      },
      "EventSubscription": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "id",
          "callback"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the listener"
          },
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        }
      },
      "EventSubscriptionInput": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": ["callback"],
        "properties": {
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        }
      },
      "CustomerCreateEvent": {
        "type": "object",
        "description": "The notification data structure",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the resource involved in the event"
          },
          "href": {
            "type": "string",
            "description": "Reference of the resource involved in the event"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the event occurrence."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explanatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "format": "date-time",
            "description": "The time the event occured."
          },
          "event": {"$ref": "#/components/schemas/CustomerCreateEventPayload"}
        }
      },
      "CustomerCreateEventPayload": {
        "type": "object",
        "description": "The event data structure",
        "properties": {
          "customer": {"$ref": "#/components/schemas/Customer"}
        }
      },
      "CustomerAttributeValueChangeEvent": {
        "type": "object",
        "description": "The notification data structure",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the event occurrence."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explanatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "format": "date-time",
            "description": "The time the event occured."
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {"$ref": "#/components/schemas/CustomerAttributeValueChangeEventPayload"}
        }
      },
      "CustomerAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "The event data structure",
        "properties": {
          "customer": {"$ref": "#/components/schemas/Customer"}
        }
      },
      "CustomerStateChangeEvent": {
        "type": "object",
        "description": "The notification data structure",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the resource involved in the event"
          },
          "href": {
            "type": "string",
            "description": "Reference of the resource involved in the event"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the event occurrence."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explanatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "format": "date-time",
            "description": "The time the event occured."
          },
          "event": {"$ref": "#/components/schemas/CustomerStateChangeEventPayload"}
        }
      },
      "CustomerStateChangeEventPayload": {
        "type": "object",
        "description": "The event data structure",
        "properties": {
          "customer": {"$ref": "#/components/schemas/Customer"}
        }
      },
      "CustomerDeleteEvent": {
        "type": "object",
        "description": "The notification data structure",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the resource involved in the event"
          },
          "href": {
            "type": "string",
            "description": "Reference of the resource involved in the event"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the event occurrence."
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explanatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "format": "date-time",
            "description": "The time the event occured."
          },
          "event": {"$ref": "#/components/schemas/CustomerDeleteEventPayload"}
        }
      },
      "CustomerDeleteEventPayload": {
        "type": "object",
        "description": "The event data structure",
        "properties": {
          "customer": {"$ref": "#/components/schemas/Customer"}
        }
      },
      "Error": {
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
        "type": "object",
        "required": [
          "code",
          "reason"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "format": "uri",
            "description": "URI of documentation describing the error."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        }
      }
    }
  }
}